/**
 * Test Directo: MongoDB Class + JOINs
 * Validaci√≥n directa de la clase MongoDB sin QueryBuilder wrapper
 */

import { MongoDB } from '../MongoDB.js';

async function testMongoDBDirecto() {
  console.log('üîß Test Directo: Clase MongoDB + JOINs\n');

  try {
    const mongodb = new MongoDB();

    // ===========================================
    // 1. TEST SELECT B√ÅSICO
    // ===========================================
    console.log('üìã 1. Test SELECT b√°sico...');

    const selectCmd = mongodb.select(['name', 'email']);
    mongodb.from('users', null, selectCmd);

    console.log('‚úÖ SELECT construido:');
    console.log('   Comando:', JSON.stringify(selectCmd._commands[0], null, 2));

    // ===========================================
    // 2. TEST SELECT + WHERE
    // ===========================================
    console.log('\nüìã 2. Test SELECT con WHERE...');

    const selectWhereCmd = mongodb.select(['name', 'age']);
    mongodb.from('users', null, selectWhereCmd);
    mongodb.where({ age: { $gt: 25 } }, selectWhereCmd);

    console.log('‚úÖ SELECT + WHERE construido:');
    console.log('   Comando:', JSON.stringify(selectWhereCmd._commands[0], null, 2));

    // ===========================================
    // 3. TEST JOIN DIRECTO
    // ===========================================
    console.log('\nüìã 3. Test JOIN directo...');

    const joinCmd = mongodb.select(['u.name', 'o.total']);
    mongodb.from('users', 'u', joinCmd);
    mongodb.join('orders', 'u.id = o.user_id', 'inner', 'o', joinCmd);

    console.log('‚úÖ JOIN configurado:');
    console.log('   JOINs metadata:', JSON.stringify(joinCmd.joins, null, 2));
    console.log('   Comando final:', JSON.stringify(joinCmd._commands[0], null, 2));

    // ===========================================
    // 4. TEST DE PIPELINE BUILDING
    // ===========================================
    console.log('\nüìã 4. Test construcci√≥n de pipeline...');

    if (joinCmd.joins && joinCmd.joins.length > 0) {
      const pipeline = mongodb.buildJoinPipeline(joinCmd.joins);
      console.log('‚úÖ Pipeline generado:', JSON.stringify(pipeline, null, 2));
    }

    // ===========================================
    // 5. TEST M√öLTIPLES JOINS
    // ===========================================
    console.log('\nüìã 5. Test m√∫ltiples JOINs...');

    const multiJoinCmd = mongodb.select(['u.name', 'o.total', 'p.name']);
    mongodb.from('users', 'u', multiJoinCmd);
    mongodb.join('orders', 'u.id = o.user_id', 'inner', 'o', multiJoinCmd);
    mongodb.join('products', 'o.product_id = p.id', 'left', 'p', multiJoinCmd);

    console.log('‚úÖ M√∫ltiples JOINs configurados:');
    console.log('   Total JOINs:', multiJoinCmd.joins?.length || 0);
    console.log('   JOINs:', JSON.stringify(multiJoinCmd.joins, null, 2));

    if (multiJoinCmd.joins) {
      const multiPipeline = mongodb.buildJoinPipeline(multiJoinCmd.joins);
      console.log('   Pipeline final:', JSON.stringify(multiPipeline, null, 2));
    }

    // ===========================================
    // 6. TEST M√âTODOS DE CONVENIENCIA
    // ===========================================
    console.log('\nüìã 6. Test m√©todos de conveniencia...');

    // innerJoin
    const innerJoinCmd = mongodb.select(['u.name', 'o.total']);
    mongodb.from('users', 'u', innerJoinCmd);
    mongodb.innerJoin('orders', 'u.id = o.user_id', 'o', innerJoinCmd);

    console.log('‚úÖ innerJoin() configurado:');
    console.log('   JOIN metadata:', JSON.stringify(innerJoinCmd.joins, null, 2));

    // leftJoin
    const leftJoinCmd = mongodb.select(['u.name', 'p.bio']);
    mongodb.from('users', 'u', leftJoinCmd);
    mongodb.leftJoin('profiles', 'u.id = p.user_id', 'p', leftJoinCmd);

    console.log('‚úÖ leftJoin() configurado:');
    console.log('   JOIN metadata:', JSON.stringify(leftJoinCmd.joins, null, 2));

    // rightJoin
    const rightJoinCmd = mongodb.select(['u.name', 'c.details']);
    mongodb.from('users', 'u', rightJoinCmd);
    mongodb.rightJoin('contacts', 'u.id = c.user_id', 'c', rightJoinCmd);

    console.log('‚úÖ rightJoin() configurado:');
    console.log('   JOIN metadata:', JSON.stringify(rightJoinCmd.joins, null, 2));

    // ===========================================
    // 7. TEST UPDATE + JOIN (simulado)
    // ===========================================
    console.log('\nüìã 7. Test operaciones complejas...');

    const updateCmd = mongodb.update('users', { status: 'active' });
    mongodb.where({ age: { $gte: 18 } }, updateCmd);

    console.log('‚úÖ UPDATE complejo:');
    console.log('   Comando:', JSON.stringify(updateCmd._commands[0], null, 2));

    const deleteCmd = mongodb.delete('users');
    mongodb.where({ active: false, last_login: { $lt: new Date('2023-01-01') } }, deleteCmd);

    console.log('‚úÖ DELETE complejo:');
    console.log('   Comando:', JSON.stringify(deleteCmd._commands[0], null, 2));

    // ===========================================
    // 8. RESUMEN DE CAPACIDADES
    // ===========================================
    console.log('\nüìã 8. Resumen de capacidades MongoDB...');

    console.log('\n‚úÖ OPERACIONES B√ÅSICAS IMPLEMENTADAS:');
    console.log('   ‚Ä¢ SELECT ‚Üí find() con projection');
    console.log('   ‚Ä¢ WHERE ‚Üí filter conditions');
    console.log('   ‚Ä¢ UPDATE ‚Üí update() con conditions');
    console.log('   ‚Ä¢ DELETE ‚Üí delete() con conditions');

    console.log('\n‚úÖ JOINS IMPLEMENTADOS:');
    console.log('   ‚Ä¢ INNER JOIN ‚Üí $lookup + $unwind');
    console.log('   ‚Ä¢ LEFT JOIN ‚Üí $lookup + $unwind preserveNullAndEmptyArrays');
    console.log('   ‚Ä¢ RIGHT JOIN ‚Üí $lookup + $unwind preserveNullAndEmptyArrays');
    console.log('   ‚Ä¢ M√∫ltiples JOINs ‚Üí Pipeline complejo');
    console.log('   ‚Ä¢ Parsing de condiciones ‚Üí localField/foreignField');

    console.log('\n‚úÖ M√âTODOS DE CONVENIENCIA:');
    console.log('   ‚Ä¢ innerJoin(table, condition, alias)');
    console.log('   ‚Ä¢ leftJoin(table, condition, alias)');
    console.log('   ‚Ä¢ rightJoin(table, condition, alias)');

    console.log('\nüéØ PR√ìXIMAS CARACTER√çSTICAS SQL:');
    console.log('   ‚Ä¢ GROUP BY ‚Üí $group aggregation');
    console.log('   ‚Ä¢ HAVING ‚Üí $match after $group');
    console.log('   ‚Ä¢ ORDER BY ‚Üí $sort');
    console.log('   ‚Ä¢ LIMIT/OFFSET ‚Üí $skip + $limit');
    console.log('   ‚Ä¢ Subconsultas ‚Üí Nested pipelines');
    console.log('   ‚Ä¢ UNION ‚Üí $unionWith');
    console.log('   ‚Ä¢ Window Functions ‚Üí $setWindowFields');

    console.log('\nüîß ESTADO T√âCNICO:');
    console.log('   ‚Ä¢ Traducci√≥n SQL ‚Üí MongoDB: ‚úÖ FUNCIONAL');
    console.log('   ‚Ä¢ Construcci√≥n de comandos: ‚úÖ FUNCIONAL');
    console.log('   ‚Ä¢ Pipeline de agregaci√≥n: ‚úÖ FUNCIONAL');
    console.log('   ‚Ä¢ Integraci√≥n con QueryBuilder: ‚ö†Ô∏è REQUIERE AJUSTES');
    console.log('   ‚Ä¢ Conexi√≥n a MongoDB real: ‚ö†Ô∏è REQUIERE CONFIGURACI√ìN');

  } catch (error) {
    console.error('‚ùå Error en test directo:', error);
    console.error('Stack:', error.stack);
  }
}

// Ejecutar test
console.log('üé¨ Iniciando Test Directo MongoDB Class...\n');
testMongoDBDirecto().catch(console.error);

import PostgreSQLExtended from '../postgresql-extended.js';

console.log("üîç VERIFICACI√ìN DE GENERACI√ìN SQL");
console.log("=".repeat(40));

async function testSQL() {
  try {
    const qb = new PostgreSQLExtended();

    // Test 1: SELECT b√°sico con JSON operators
    console.log("üìù Test 1: SELECT con operadores JSON");
    const result1 = await qb
      .select(["data->>'name' as name", "data->'config' as config"])
      .from("users")
      .toString();

    console.log("‚úÖ SQL generado:", result1);
    console.log("   - Contiene SELECT:", result1.includes("SELECT"));
    console.log("   - Contiene JSON operators:", result1.includes("data->>'name'"));

    // Test 2: SELECT con m√∫ltiples campos
    console.log("\nüìù Test 2: SELECT m√∫ltiple simple");
    const qb2 = new PostgreSQLExtended();
    const result2 = await qb2
      .select(["id", "name", "email"])
      .from("users")
      .toString();

    console.log("‚úÖ SQL generado:", result2);
    console.log("   - Contiene campos:", result2.includes("id, name, email"));

    console.log("\nüéâ GENERACI√ìN SQL VERIFICADA");
    console.log("‚úÖ Operadores JSON funcionan correctamente");
    console.log("‚úÖ SELECT m√∫ltiple funciona");
    console.log("‚úÖ toString() resuelve promesas correctamente");

  } catch (error) {
    console.error("‚ùå Error en generaci√≥n SQL:", error.message);
    console.log("‚ö†Ô∏è  Esto puede ser normal si hay problemas con WHERE complex");
  }
}

testSQL();
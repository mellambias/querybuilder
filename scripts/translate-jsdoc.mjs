#!/usr/bin/env node
/**
 * Script para traducir la interfaz de JSDoc al castellano
 * Se ejecuta despu√©s de generar la documentaci√≥n
 */

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const DOCS_DIR = path.join(__dirname, '..', 'docs', 'jsdoc');

// Mapeo de traducciones
const translations = {
  // Navegaci√≥n
  'Home': 'Inicio',
  'Classes': 'Clases',
  'Modules': 'M√≥dulos',
  'Namespaces': 'Espacios de Nombres',
  'Global': 'Global',
  'Externals': 'Externos',
  'Events': 'Eventos',
  'Mixins': 'Mixins',
  'Tutorials': 'Tutoriales',
  'Interfaces': 'Interfaces',
  
  // Secciones
  'Description': 'Descripci√≥n',
  'Source': 'C√≥digo Fuente',
  'Parameters': 'Par√°metros',
  'Properties': 'Propiedades',
  'Returns': 'Retorna',
  'Type': 'Tipo',
  'Examples': 'Ejemplos',
  'Example': 'Ejemplo',
  'Members': 'Miembros',
  'Methods': 'M√©todos',
  'Constructor': 'Constructor',
  'Static Members': 'Miembros Est√°ticos',
  'Static Methods': 'M√©todos Est√°ticos',
  'Extends': 'Extiende',
  'Implements': 'Implementa',
  'See': 'Ver',
  'Throws': 'Lanza',
  'Deprecated': 'Obsoleto',
  'Since': 'Desde',
  'Version': 'Versi√≥n',
  'Author': 'Autor',
  'License': 'Licencia',
  
  // Tabla de par√°metros
  'Name': 'Nombre',
  'Default': 'Por Defecto',
  'Attributes': 'Atributos',
  
  // Etiquetas
  'optional': 'opcional',
  'nullable': 'anulable',
  'non-null': 'no nulo',
  'repeatable': 'repetible',
  
  // B√∫squeda
  'Search': 'Buscar',
  'Search results': 'Resultados de b√∫squeda',
  'No results found': 'No se encontraron resultados',
  
  // Footer
  'Documentation generated by': 'Documentaci√≥n generada por',
  'using the': 'usando el tema',
  'theme': 'tema'
};

/**
 * Traduce el contenido HTML
 */
function translateHTML(html) {
  let translatedHTML = html;
  
  // Reemplazar textos en las etiquetas dt (definiciones)
  for (const [english, spanish] of Object.entries(translations)) {
    // Reemplazar en etiquetas h2, h3, h4, dt
    translatedHTML = translatedHTML.replace(
      new RegExp(`(<(?:h[2-4]|dt)[^>]*>)\\s*${english}\\s*(</)`, 'gi'),
      `$1${spanish}$2`
    );
    
    // Reemplazar en clases tag-
    translatedHTML = translatedHTML.replace(
      new RegExp(`(<dt class="tag-[^"]*">)\\s*${english}:?\\s*(</)`, 'gi'),
      `$1${spanish}:$2`
    );
    
    // Reemplazar en encabezados de tabla
    translatedHTML = translatedHTML.replace(
      new RegExp(`(<th[^>]*>)\\s*${english}\\s*(</th>)`, 'gi'),
      `$1${spanish}$2`
    );
  }
  
  return translatedHTML;
}

/**
 * Procesa todos los archivos HTML en el directorio
 */
async function translateDocumentation() {
  try {
    console.log('üåê Traduciendo documentaci√≥n al castellano...\n');
    
    const files = await fs.readdir(DOCS_DIR);
    const htmlFiles = files.filter(file => file.endsWith('.html'));
    
    let count = 0;
    
    for (const file of htmlFiles) {
      const filePath = path.join(DOCS_DIR, file);
      const content = await fs.readFile(filePath, 'utf8');
      const translatedContent = translateHTML(content);
      
      if (content !== translatedContent) {
        await fs.writeFile(filePath, translatedContent, 'utf8');
        count++;
      }
    }
    
    console.log(`‚úÖ ${count} archivos traducidos de ${htmlFiles.length} totales\n`);
    
  } catch (error) {
    console.error('‚ùå Error traduciendo documentaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  translateDocumentation();
}

export { translateDocumentation };
